name: CI

on:
    push:
        branches:
            - "feature/*"
            - "develop"
    pull_request:
        branches:
            - "develop"

jobs:
    build:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:15
                ports:
                    - 5432:5432
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: questify_test
                options: >-
                    --health-cmd="pg_isready -U postgres"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

            redis:
                image: redis:7
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        env:
            DATABASE_URL: postgresql://postgres:postgres@localhost:5432/questify_test
            REDIS_URL: redis://localhost:6379
            NUXT_SESSION_PASSWORD: this-is-a-super-long-test-session-password-123456
            NODE_ENV: test

        steps:
            - name: 🧾 Checkout repo
              uses: actions/checkout@v4

            - name: 🧩 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: ⚙️ Enable Corepack (for pnpm)
              run: corepack enable

            - name: 📦 Install pnpm dependencies
              run: pnpm install --frozen-lockfile

            - name: 💾 Cache Playwright binaries
              uses: actions/cache@v4
              with:
                  path: ~/.cache/ms-playwright
                  key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-playwright-

            - name: 🌐 Install Playwright browsers
              run: pnpm exec playwright install --with-deps

            - name: 🧱 Generate Nuxt types
              env:
                  NITRO_PRESET: node
              run: pnpm --filter nuxt dev:prepare

            - name: 🧰 Build shared package
              run: pnpm --filter shared build

            - name: 🧩 Lint types
              run: pnpm --filter nuxt lint:types

            - name: 🧹 Lint
              run: pnpm lint

            - name: ⏳ Wait for Postgres
              run: |
                  until pg_isready -h localhost -p 5432 -U postgres; do
                    echo "Waiting for Postgres..."
                    sleep 2
                  done

            - name: 🧬 Generate Prisma Client
              run: pnpm prisma:generate

            - name: 🧩 Deploy Prisma Migrations
              working-directory: packages/prisma
              run: pnpm run deploy

            - name: 🏗️ Build Nuxt app for tests
              run: |
                  pnpm --filter nuxt dev:prepare
                  pnpm --filter nuxt exec nuxi build

            # ✅ Run your full test suite
            - name: 🧪 Run tests
              env:
                  NUXT_TEST_UTILS_BUILD: true
              run: pnpm test

            - name: 📈 Test coverage
              run: pnpm test:coverage

            - name: 🌍 Nuxt E2E tests
              run: pnpm --filter nuxt test:e2e

            - name: 📊 Upload coverage reports
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-reports
                  path: |
                      apps/nuxt/coverage
                      apps/worker/coverage
                      packages/shared/coverage

            - name: 🗃️ Upload Playwright traces
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-results
                  path: apps/nuxt/test-results

            - name: 💾 Cache Nuxt build
              uses: actions/cache@v4
              with:
                  path: apps/nuxt/.nuxt
                  key: ${{ runner.os }}-nuxt-${{ hashFiles('apps/nuxt/package.json', 'pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-nuxt-
